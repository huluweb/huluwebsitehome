import React, { useState } from 'react';
import { HiPlus, HiTrash, HiCheckCircle, HiOutlinePencil, HiUser, HiOutlineSearch } from 'react-icons/hi';

interface Task {
  id: number;
  text: string;
  assignedTo: string;
  completed: boolean;
  assignedBy: string;
  date: string;
}

interface User {
  id: string;
  name: string;
  role: 'admin' | 'employee';
}

const TodoApp: React.FC = () => {
  const users: User[] = [
    { id: 'abush', name: 'Abush', role: 'admin' },
    { id: 'blen', name: 'Blen', role: 'employee' },
    { id: 'biruk', name: 'Biruk', role: 'employee' },
    { id: 'eldana', name: 'Eldana', role: 'employee' },
    { id: 'eyerus', name: 'Eyerus', role: 'employee' },
    { id: 'kaleab', name: 'Kaleab', role: 'employee' },
  ];

  const [tasks, setTasks] = useState<Task[]>([
    { id: 1, text: 'Complete project documentation', assignedTo: 'eldana', completed: false, assignedBy: 'abush', date: '2023-05-15' },
    { id: 2, text: 'Review client feedback', assignedTo: 'biruk', completed: true, assignedBy: 'abush', date: '2023-05-10' },
    { id: 3, text: 'Update website content', assignedTo: 'blen', completed: false, assignedBy: 'abush', date: '2023-05-12' },
    { id: 4, text: 'Prepare quarterly report', assignedTo: 'setiyo', completed: false, assignedBy: 'abush', date: '2023-05-14' },
    { id: 5, text: 'Fix login page issues', assignedTo: 'kaleab', completed: true, assignedBy: 'abush', date: '2023-05-08' },
  ]);
  
  const [activeUser, setActiveUser] = useState<string>('abush');
  const [newTaskText, setNewTaskText] = useState('');
  const [assignedTo, setAssignedTo] = useState<string>('eldana');
  const [searchTerm, setSearchTerm] = useState('');

  const addTask = () => {
    if (newTaskText.trim() !== '') {
      const newTask: Task = {
        id: Date.now(),
        text: newTaskText,
        assignedTo,
        completed: false,
        assignedBy: activeUser,
        date: new Date().toISOString().split('T')[0]
      };
      
      setTasks([...tasks, newTask]);
      setNewTaskText('');
    }
  };

  const deleteTask = (id: number) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  const toggleTask = (id: number) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const currentUser = users.find(user => user.id === activeUser);
  const isAdmin = currentUser?.role === 'admin';
  
  // Filter tasks based on active user and search term
  const filteredTasks = tasks.filter(task => {
    const matchesUser = isAdmin || task.assignedTo === activeUser;
    const matchesSearch = task.text.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesUser && matchesSearch;
  });

  return (
    <div className="bg-white rounded-xl shadow-sm overflow-hidden">
      <div className="grid">
        {/* Sidebar with user selection */}
        <div className="w-full bg-gray-800 text-white flex items-center">
          <div className="p-4 border-b border-gray-700">
            <h2 className="text-xl font-bold">Team Tasks</h2>
            <p className="text-gray-400 text-sm">Manage your team's tasks</p>
          </div>
          
          <div className="p-3 flex items-center">
            <div className='flex items-center'>
            <div className="relative mb-4 mt-5">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <HiOutlineSearch className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="Search tasks..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="block w-full pl-10 pr-3 py-2 border border-gray-600 rounded-md bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              />
            </div>
            </div>
          </div>
          
          <nav className="h-[70%] px-2 flex">
            {users.map((user) => (
              <button
                key={user.id}
                onClick={() => setActiveUser(user.id)}
                className={`w-full flex items-center px-3 py-1 rounded-lg transition-colors ${
                  activeUser === user.id 
                    ? 'bg-blue-600 text-white' 
                    : 'text-gray-300 hover:bg-gray-700'
                }`}
              >
                <div className="bg-gray-200 border-2 border-dashed rounded-full w-8 h-8 flex items-center justify-center">
                  <HiUser className="text-gray-600" />
                </div>
                <div className="ml-3 text-left">
                  <p className="font-medium">{user.name}</p>
                  <p className="text-xs text-gray-400 capitalize">{user.role}</p>
                </div>
              </button>
            ))}
          </nav>
        </div>
        
        {/* Main content */}
        <div className="flex-1">
          {/* Header */}
          <div className="bg-white border-b border-gray-200 p-4">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-xl font-bold text-gray-800">
                  {currentUser?.name}'s Tasks
                </h1>
                <p className="text-sm text-gray-600">
                  {isAdmin 
                    ? 'Admin dashboard - Assign tasks to your team' 
                    : 'Your assigned tasks'}
                </p>
              </div>
              
              <div className="flex items-center">
                <div className="bg-gray-200 border-2 border-dashed rounded-xl w-10 h-10" />
              </div>
            </div>
          </div>
          
          {/* Task creation form (only for admin) */}
          {isAdmin && (
            <div className="bg-blue-50 border-b border-blue-100 p-4">
              <div className="max-w-4xl mx-auto">
                <h2 className="text-lg font-medium text-blue-800 mb-3">Assign New Task</h2>
                <div className="flex flex-col md:flex-row gap-3">
                  <input
                    type="text"
                    value={newTaskText}
                    onChange={(e) => setNewTaskText(e.target.value)}
                    placeholder="Enter task description..."
                    className="flex-1 border text-black border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    onKeyPress={(e) => e.key === 'Enter' && addTask()}
                  />
                  
                  <select
                    value={assignedTo}
                    onChange={(e) => setAssignedTo(e.target.value)}
                    className="border border-gray-300 text-[#333] rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {users
                      .filter(user => user.role === 'employee')
                      .map(user => (
                        <option key={user.id} value={user.id}>
                          {user.name}
                        </option>
                      ))}
                  </select>
                  
                  <button
                    onClick={addTask}
                    className="bg-blue-600 text-white rounded-lg px-4 py-2 flex items-center justify-center hover:bg-blue-700 transition-colors"
                  >
                    <HiPlus className="w-5 h-5" />
                    <span className="ml-1">Assign Task</span>
                  </button>
                </div>
              </div>
            </div>
          )}
          
          {/* Tasks list */}
          <div className="p-4">
            <div className="max-w-4xl mx-auto">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold text-gray-800">
                  {isAdmin ? 'All Tasks' : 'Your Tasks'}
                </h2>
                <p className="text-sm text-gray-600">
                  {filteredTasks.filter(t => !t.completed).length} pending, {filteredTasks.filter(t => t.completed).length} completed
                </p>
              </div>
              
              {filteredTasks.length === 0 ? (
                <div className="text-center py-10">
                  <div className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-xl w-16 h-16 mx-auto flex items-center justify-center">
                    <HiCheckCircle className="w-8 h-8 text-gray-400" />
                  </div>
                  <h3 className="mt-4 text-lg font-medium text-gray-900">No tasks found</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    {isAdmin 
                      ? 'Assign tasks to your team using the form above' 
                      : 'No tasks assigned to you yet'}
                  </p>
                </div>
              ) : (
                <div className="space-y-3">
                  {filteredTasks.map((task) => {
                    const assignedUser = users.find(u => u.id === task.assignedTo);
                    const assignedByUser = users.find(u => u.id === task.assignedBy);
                    
                    return (
                      <div 
                        key={task.id} 
                        className={`flex items-start p-4 rounded-lg border ${
                          task.completed 
                            ? 'bg-green-50 border-green-200' 
                            : 'bg-white border-gray-200 hover:shadow-sm'
                        }`}
                      >
                        <button
                          onClick={() => toggleTask(task.id)}
                          className={`mt-1 mr-3 ${task.completed ? 'text-green-600' : 'text-gray-400'}`}
                        >
                          <HiCheckCircle className="w-5 h-5" />
                        </button>
                        
                        <div className="flex-1">
                          <p 
                            className={`${task.completed ? ' text-gray-500' : 'text-gray-800'}`}
                          >
                            {task.text}

                          </p>
                          {task.completed ? <span className='text-green-600'>task completed</span> : <span className='text-yellow-400'>Under Progress</span>}
                          
                          <div className="mt-2 flex flex-wrap items-center gap-2 text-sm text-gray-500">
                            <div className="flex items-center">
                              <span className="text-gray-400">Assigned to:</span>
                              <div className="flex items-center ml-1">
                                <div className="bg-gray-200 border-2 border-dashed rounded-full w-5 h-5 mr-1" />
                                <span className="font-medium">{assignedUser?.name}</span>
                              </div>
                            </div>
                            
                            {isAdmin && (
                              <div className="flex items-center">
                                <span className="text-gray-400 ml-2">Assigned by:</span>
                                <div className="flex items-center ml-1">
                                  <div className="bg-gray-200 border-2 border-dashed rounded-full w-5 h-5 mr-1" />
                                  <span className="font-medium">{assignedByUser?.name}</span>
                                </div>
                              </div>
                            )}
                            
                            <div className="flex items-center">
                              <span className="text-gray-400 ml-2">Date:</span>
                              <span className="font-medium ml-1">{task.date}</span>
                            </div>
                          </div>
                        </div>
                        
                        {isAdmin && (
                          <button
                            onClick={() => deleteTask(task.id)}
                            className="text-gray-400 hover:text-red-500 p-1"
                          >
                            <HiTrash className="w-5 h-5" />
                          </button>
                        )}
                      </div>
                    );
                  })}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TodoApp;

first make the user that are employee also can message to admin and divide employee with video editor , host , website developer , call center 
and call center can message to admin and admin for all employee and video editor can message to host and admin and website developer can message to admin and host can message to video editor and admin 
second make message are send to backend with completed and under progress and make ui best for ever also please make it good ui and make the user are select option like to select to see